import { Injectable, Inject<% if (isProtected) { %>, ForbiddenException<% } %> } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
<% if (className === 'File') { %>
import * as fs from 'fs-extra';
import * as path from 'path';
import { Readable } from 'stream';
import { lookup as mimeLookup } from 'mime-types';
import { ReadFileResponseDto } from './dto/read-file-response.dto';
<% } %>
import { Create<%= className %>Dto } from './dto/create-<%= folderName %>.dto';
import { Update<%= className %>Dto } from './dto/update-<%= folderName %>.dto';
import { Prisma<% if (className === 'User') { %>, Role<% } %> } from '@prisma/client';
<% if (className === 'User') { %>
import * as bcrypt from 'bcrypt';
import { CreateJwtUserDto } from '../auth/dto/auth.dto';
<% } else if (isProtected || hasCreatedBy) { %>
import { CreateJwtUserDto } from '../auth/dto/auth.dto';
<% } %>
<% if (hasCreatedBy || isProtected) { %>
import { REQUEST } from '@nestjs/core';
import { Request } from 'express';
<% } %>

<% if (className === 'File') { %>
const language = (
  filename: string,
  mimeType?: string,
): string | undefined => {
  if (!filename) return;

  const ext = filename.split('.').pop()?.toLowerCase();

  const extMap: Record<string, string> = {
    js: 'javascript',
    ts: 'typescript',
    tsx: 'typescript',
    json: 'json',
    html: 'html',
    css: 'css',
    md: 'markdown',
    py: 'python',
    java: 'java',
    cpp: 'cpp',
    cs: 'csharp',
    rs: 'rust',
    sh: 'shell',
    yml: 'yaml',
    yaml: 'yaml',
    xml: 'xml',
    txt: 'plaintext',
    go: 'go',
    php: 'php',
  };

  if (ext && extMap[ext]) {
    return extMap[ext];
  }

  // Use mime-types library if mimeType not provided
  const detectedMimeType = mimeType || mimeLookup(filename) || undefined;

  const mimeMap: Record<string, string> = {
    'application/json': 'json',
    'text/html': 'html',
    'text/css': 'css',
    'application/javascript': 'javascript',
    'application/typescript': 'typescript',
    'text/markdown': 'markdown',
    'application/xml': 'xml',
    'text/x-python': 'python',
    'text/plain': 'plaintext',
    'video/mp2t': 'typescript', // override for .ts files
  };

  return detectedMimeType ? mimeMap[detectedMimeType] : undefined;
};
<% } %>
@Injectable()
export class <%= className %>Service {
  constructor(
    <% if (className === 'File') { %>
    @Inject('EXCLUDED_FOLDERS') private readonly EXCLUDED_FOLDERS: string[],
    <% } %>
    private prisma: PrismaService,
    <% if (hasCreatedBy || isProtected) { %>@Inject(REQUEST) private readonly request: Request & { user?: CreateJwtUserDto },<% } %>
  ) {}
  <% if (className === 'File') { %>
  private getFileTree(dir: string, recursive: boolean = false): any[] {
    if (!fs.existsSync(dir)) return [];

    const files = fs.readdirSync(dir);
    return files
      .filter((file) => !this.EXCLUDED_FOLDERS.includes(file))
      .map((file) => {
        const filePath = path.join(dir, file);
        const isDirectory = fs.statSync(filePath).isDirectory();
        return {
          name: file,
          isDirectory,
          path: filePath,
          type: isDirectory ? 'folder' : 'file',
          children:
            isDirectory && recursive ? this.getFileTree(filePath, true) : null,
        };
      });
  }
  <% } %>
  <% if (hasCreatedBy || isProtected) { %>
  private get userId(): string | undefined {
    return this.request.user?.sub;
  }
  <% } %>

  create(data: Create<%= className %>Dto) {
    const createData: any = { ...data };

    <% if (hasCreatedBy && className !== 'User') { %>
    const hasCreatedById = data.hasOwnProperty('createdById');
    if (this.userId) {
      createData.createdBy = {
        connect: { id: this.userId },
      };
      if (hasCreatedById) {
        delete createData.createdById;
      }
    }
    <% } %>

    return this.prisma.<%= fileName %>.create({ data: createData });
  }

  async findAllPaginated(
    where: Prisma.<%= className %>WhereInput = {},
    page = 1,
    pageSize = 10,
    select?: Prisma.<%= className %>Select,
  ) {
    const skip = (page - 1) * pageSize;
    const take = Number(pageSize);

    const [items, total] = await this.prisma.$transaction([
      this.prisma.<%= fileName %>.findMany({
        where,
        orderBy: { createdAt: 'desc' },
        skip,
        take,
        ...(select ? { select } : {}),
      }),
      this.prisma.<%= fileName %>.count({ where }),
    ]);

    return {
      items,
      total,
      page,
      pageSize,
      totalPages: Math.ceil(total / pageSize),
    };
  }

  findAll() {
    return this.prisma.<%= fileName %>.findMany();
  }

  findOne(id: string) {
    

    return this.prisma.<%= fileName %>.findUnique(
    <% if (className === 'User') { %>
    {where: { id },
        include: {
          Account: true,
          Session: true,
          Folder: true,
        },
    }
    <% } else { %>
    { where: { id } }
    <% }  %>
    );
  }

  update(id: string, data: Update<%= className %>Dto) {
    return this.prisma.<%= fileName %>.update({
      where: { id },
      data,
    });
  }

  remove(id: string) {
    return this.prisma.<%= fileName %>.delete({ where: { id } });
  }
<% if (className === 'File') { %>
  async getFilesByDirectory(
    directory: string = '',
    recursive: boolean = false,
  ): Promise<any> {
    try {
      const directoryPath = directory ? directory : process.cwd();
      return this.getFileTree(directoryPath, recursive);
    } catch (error) {
      return { error: (error as Error).message };
    }
  }
  readFile(
    buffer: Buffer,
    filename = 'file',
    asBlob = false,
    filepath: string,
  ): ReadFileResponseDto {
    const lang = language(filename, mimeLookup(filename));
    const mimeType = language(filename, mimeLookup(filename));

    const content = asBlob
      ? `data:${mimeType};base64,${buffer.toString('base64')}`
      : buffer.toString('utf-8');

    return {
      filepath,
      filename,
      mimeType: mimeLookup(mimeType) || 'text/plain',
      language: lang,
      data: content,
    };
  }
<% } %>
<% if (className === 'User') { %>
  async createUser(email: string, name: string, phone?: string, hash?: string) {
    return this.prisma.user.create({
      data: {
        email,
        name,
        phone_number: phone,
        role: Role.USER,
        password: hash ? { create: { hash } } : undefined,
      },
    });
  }

  async verifyEmail(userId: string) {
    return this.prisma.user.update({
      where: { id: userId },
      data: { emailVerified: new Date() },
    });
  }

  async validatePassword(password: string, hash: string) {
    return bcrypt.compare(password, hash);
  }

  async hashPassword(password: string): Promise<string> {
    return bcrypt.hash(password, 10);
  }

  findById(userId: string) {
    return this.prisma.user.findUnique({
      where: { id: userId },
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        phone_number: true,
        createdAt: true,
      },
    });
  }

  async findByEmail(email: string) {
    return this.prisma.user.findUnique({
      where: { email },
      include: {
        password: true,
        Account: true,
      },
    });
  }
<% } %>
}

